--MICROK8S
-INSTALL
sudo snap install microk8s --classic --channel=1.18/stable
-UNINSTALL
microk8s.reset
snap remove microk8s
-SETUP
sudo usermod -a -G microk8s $USER
sudo chown -f -R $USER ~/.kube
su - $USER
microk8s enable helm dns storage dashboard rbac ingress metallb
-SETUP ALIAS
alias kubectl='microk8s kubectl'
-STOP
microk8s.stop
-START
microk8s.start
-CREATE CREDENTIALS FOR DOCKER IMAGES pulling from private docker registry
kubectl create secret generic regcred \
    --from-file=.dockerconfigjson=~/cronicler-kubernetes/gitlab-docker-registry-config.json \
    --type=kubernetes.io/dockerconfigjson


--GRANT PERMISSIONS
-USER
sudo chown -f -R $USER ~/.kube

--INFO
-NAMESPACES
kubectl get all --all-namespaces
-NODES
kubectl get nodes
-SERVICES
kubectl get services
-PODS
kubectl get pods
-POD METRICS
kubectl top pod POD_NAME --containers
-VOLUMES
kubectl get pv
-EVENTS
kubectl get events
-DEPLOYMENTS
kubectl get deployments --all-namespaces
-DEPLOYMENTS history
kubectl rollout history deployment/DEPLOYMENT_NAME
-DEPLOYMENT ROLLING UPDATE STATUS
kubectl rollout status -w deployment/DEPLOYMENT_NAME
-NODE INFORMATION
kubectl describe node
-POD INFORMATION
kubectl describe pod POD_NAME

--LABEL
-POD
kubectl label pods POD_NAME new-label=LABEL_NAME

--ANNOTATE
-POD
kubectl annotate pods POD_NAME anotation-key=ANOTATION_VALUE

--AUTOSCALE
-DEPLOYMENT
kubectl autoscale deployment DEPLOYMENT_NAME --min=NUMBER_FROM --max=NUMBER_TO

--SCALE
-REPLICA_SET
kubectl scale --replicas=NUMBER rs/REPLICA_SET_NAME
-RESOURCE
kubectl scale --replicas=3 -f YAML_FILE_NAME.yaml
-DEPLOYMENT - scale with statement IF 2 REPLICAS scale it to 3
kubectl scale --current-replicas=2 --replicas=3 deployment/DEPLOYMENT_NAME
-REPLICATION_CONTROLLERS scale multiple at one time
kubectl scale --replicas=5 rc/REPLICATION_CONTROLLER_NAME rc/ANOTHER_REPLICATION_CONTROLLER_NAME

--TOKEN
-GENERATE
token=$(microk8s kubectl -n kube-system get secret | grep default-token | cut -d " " -f1)
-GET
kubectl -n kube-system describe secret $token

--FORWARD
-SERVICE
kubectl port-forward -n kube-system service/SERVICE_NAME SERVICE_PORT:PROTOCOL_PORT
-EXPOSE
kubectl rc SERVICE_NAME --port=POR_NAME --target-port=TARGET_PORT

--DELETE
-POD from file
kubectl delete -f ./FILE_NAME.json
-POD/SERVICE by name
kubectl delete pod,service NAME_1 NAME_2
-POD/SERVICE by label
kubectl delete pods,services -l name=LABEL_NAME
-ALL PODS/SERVICES in NAMESPACE
kubectl -n NAMESPACE delete pod,svc --all
-DEPLOYMENT
kubectl delete deployment NAME

--LOGS
-POD
kubectl logs POD_NAME
-POD BY LABEL
kubectl logs -l name=LABEL_NAME
-POD PREVIOUS INSTANCE
kubectl logs POD_NAME --previous
-POD STREAM
kubectl logs -f POD_NAME

--RUN
-YAML RUN
kubectl create -f FILENAME.yaml
-ATTACH running container
kubectl attach PODNAME -i
-COMMAND in existing pod
kubectl exec POD_NAME -- COMMAND
-COMMAND in multi-container case
kubectl exec POD_NAME -c CONTAINER_NAME -- COMAND
-DEPLOYMENT create
kubectl create deployment DEPLOYMENT_NAME --image=IMAGE_NAME
-DEPLOYMENT set image
kubectl set image deployment/DEPLOYMENT_NAME www=IMAGE_NAME:REVISION
-DEPLOYMENT rollback
kubectl rollout undo deployment/DEPLOYMENT_NAME
-DEPLOYMENT rollback to specific revision
kubectl rollout undo deployment/DEPLOYMENT_NAME --to-revision=REVISION_NUMBER
-DEPLOYMENT RESTART
kubectl rollout restart deployment/DEPLOYMENT_NAME


--UPDATE
-YAML
kubectl apply -f FILENAME.yaml


--RESTART
-DEPLOYMENT
kubectl rollout restart deployments/DEPLOYMENT -n NAMEPSACE

--SETUP INGRESS
-INITIAL CONFIGURATION
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.26.1/deploy/static/mandatory.yaml
-LOAD BALANCER
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.26.1/deploy/static/provider/cloud-generic.yaml
-WAIT FOR INGRESS CONTROLLER PODS TO BE STARTED
kubectl get pods --all-namespaces -l app.kubernetes.io/name=ingress-nginx
-CONFIRM EXTERNAL IP FOR LOAD BALANCER
kubectl get svc --namespace=ingress-nginx
-LOAD PROJECT INGRESS FILE
kubectl apply -f PROJECT_INGRESS_FILE.yaml
-CHECK IF ROUTED CORRECTLY
curl DOMAIN_IN_INGRESS.COM

--SETUP SSL
-CREATE NAMESPACE FOR CERTIFICATE MANAGER
kubectl create namespace cert-manager
-INSTALL CERTIFICATE MANAGER
kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.12.0/cert-manager.yaml
-VERIFY THAT CERT MANAGER IS RUNNING
kubectl get pods --namespace cert-manager
-CHECK CERTIFICATE
kubectl describe certificate
-CHECK IF SSL VERIFIED OKEY
wget --save-headers -O- DOMAIN.COM
